import pandas as pd data_path = "F1 data/" results = pd.read_csv(data_path + "results.csv") drivers = pd.read_csv(data_path + "drivers.csv") constructors = pd.read_csv(data_path + "constructors.csv") races = pd.read_csv(data_path + "races.csv") # Merging the data merged = results.merge(drivers, on='driverId', how='left')\ .merge(constructors, on='constructorId', how='left')\ .merge(races, on='raceId', how='left') merged[['raceId', 'year', 'round', 'name_x', 'driverRef', 'constructorRef', 'grid', 'positionOrder', 'points']].head() f1_recent = merged[merged['year'] >= 2000].copy() f1_recent.reset_index(drop=True, inplace=True) # Unifying driver name f1_recent['driver_name'] = f1_recent['forename'] + " " + f1_recent['surname'] cleaned = f1_recent.dropna(subset=['grid', 'positionOrder']) # Positions gained (start - finish) cleaned['positions_gained'] = cleaned['grid'] - cleaned['positionOrder'] # Win and podium flags cleaned['win'] = cleaned['positionOrder'] == 1 cleaned['podium'] = cleaned['positionOrder'] <= 3 # DNF cleaned['dnf'] = cleaned['statusId'] != 1 # Group by driver and year driver_season_summary = cleaned.groupby(['driver_name', 'year']).agg({ 'raceId': 'nunique', 'points': 'sum', 'win': 'sum', 'podium': 'sum', 'grid': 'mean', 'positionOrder': 'mean', 'positions_gained': 'sum', 'dnf': 'sum' }).reset_index() # Renaming columns for clarity driver_season_summary.rename(columns={ 'raceId': 'races_entered', 'points': 'points_total', 'win': 'wins', 'podium': 'podiums', 'grid': 'avg_grid', 'positionOrder': 'avg_finish', 'positions_gained': 'total_positions_gained', 'dnf': 'dnfs' }, inplace=True) driver_season_summary from sklearn.preprocessing import MinMaxScaler # Features in DPI dpi_features = ['points_total', 'wins', 'podiums', 'races_entered', 'avg_grid', 'avg_finish', 'total_positions_gained', 'dnfs'] dpi_df = driver_season_summary.copy() # NaNs with 0 dpi_df[dpi_features] = dpi_df[dpi_features].fillna(0) # Invert avg_grid, avg_finish, and dnfs dpi_df['inv_avg_grid'] = -dpi_df['avg_grid'] dpi_df['inv_avg_finish'] = -dpi_df['avg_finish'] dpi_df['inv_dnfs'] = -dpi_df['dnfs'] # features for scaling features_to_scale = ['points_total', 'wins', 'podiums', 'races_entered', 'inv_avg_grid', 'inv_avg_finish', 'total_positions_gained', 'inv_dnfs'] # Normalize scaler = MinMaxScaler() scaled = scaler.fit_transform(dpi_df[features_to_scale]) # Put back into DataFrame for i, col in enumerate(features_to_scale): dpi_df[f'norm_{col}'] = scaled[:, i]# Assigning constructor/team name # Defining weights weights = { 'norm_points_total': 0.25, 'norm_wins': 0.20, 'norm_podiums': 0.15, 'norm_races_entered': 0.05, 'norm_inv_avg_grid': 0.10, 'norm_inv_avg_finish': 0.10, 'norm_total_positions_gained': 0.10, 'norm_inv_dnfs': 0.05 } # Calculate DPI score dpi_df['DPI'] = sum(dpi_df[col] * weight for col, weight in weights.items())f1_recent['team'] = f1_recent['name_x'] # constructor name # Rename race name for clarity f1_recent['race_name'] = f1_recent['name_y'] # race name f1_recent[['year', 'round', 'race_name', 'driver_name', 'team', 'grid', 'positionOrder', 'points']].head(20) dpi_df.sort_values(by='DPI', ascending=False)[['driver_name', 'year', 'DPI']].head(50)
